fn min(values: ...int): int {
    if len(values) == 0 {
        ret 0
    }
    let mut min = values[0]
    for _, x in values[1:] {
        if min > x {
            min = x
        }
    }
    ret min
}

fn distance(s1: str, s2: str): int {
    if s1 == s2 {
        ret 0
    }
    if len(s1) == 0 {
        ret len(s2)
    }
    if len(s2) == 0 {
        ret len(s1)
    }
    let v_len = len(s2)+1
    let mut v0 = make([]int, v_len)
    let mut v1 = make([]int, v_len)
    let mut i = 0
    for i < v_len; i++ {
        v0[i] = i
    }
    i = 0
    for i < len(s1); i++ {
        v1[0] = i+1
        let mut j = 0
        for j < len(s2); j++ {
            let mut cost = 1
            if s1[i] == s2[j] {
                cost = 0
            }
            v1[j+1] = min(v1[j]+1, v0[j+1]+1, v0[j]+cost)
        }
        v0, v1 = v1, v0
    }
    ret v0[len(s2)]
}

fn main() {
    let mut d = distance("Levenshtein", "Distance")
    outln(d)
}